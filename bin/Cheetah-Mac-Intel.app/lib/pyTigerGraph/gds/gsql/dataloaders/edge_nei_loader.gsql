CREATE QUERY edge_nei_loader_{QUERYSUFFIX}(
    INT batch_size,
    INT num_batches=1, 
    INT num_neighbors=10, 
    INT num_hops=2, 
    BOOL shuffle=FALSE,
    STRING filter_by,
    SET<STRING> v_types,
    SET<STRING> e_types,
    SET<STRING> seed_types,
    STRING delimiter,
    STRING kafka_address="",
    STRING kafka_topic,
    INT kafka_topic_partitions=1,
    STRING kafka_max_size="104857600",
    INT kafka_timeout=300000,
    STRING security_protocol="",
    STRING sasl_mechanism="",
    STRING sasl_username="",
    STRING sasl_password="",
    STRING ssl_ca_location="",
    STRING ssl_certificate_location="",
    STRING ssl_key_location="",
    STRING ssl_key_password="",
    STRING ssl_endpoint_identification_algorithm="",
    STRING sasl_kerberos_service_name="",
    STRING sasl_kerberos_keytab="",
    STRING sasl_kerberos_principal=""
) SYNTAX V1 { 
    /*
    This query generates the batches of edges and vertices attached to those edges.

    Parameters :
      num_batches    : Number of batches to divide all edges.
      num_neighbors  : Number of neighbors to expand from seeds.
      num_hops       : Number of hops to traverse to get neighbors.
      shuffle        : Whether to shuffle vertices before collecting data.
      filter_by      : A Boolean attribute to determine which edges are included.
      v_types        : Vertex types to be included.
      e_types        : Edge types to be included.
      seed_types     : Edge types to be included as seeds.
      kafka_address  : Address of the Kafka cluster to send data to.
      kafka_topic    : The Kafka topic to send data to.
      kafka_topic_partitions: Number of partitions for the given Kafka topic.
      kafka_max_size : Maximum Kafka message size.
      security_protocol : Security prototol for Kafka.
      sasl_mechanism : Authentication mechanism for Kafka.
      sasl_username  : SASL username for Kafka. 
      sasl_password  : SASL password for Kafka. 
      ssl_ca_location: Path to CA certificate for verifying the Kafka broker key.
    */
    TYPEDEF TUPLE<INT tmp_id, VERTEX src, VERTEX tgt> ID_Tuple;
    INT num_vertices;
    INT kafka_errcode;
    SumAccum<INT> @tmp_id;
    SumAccum<STRING> @@kafka_error;
    UINT producer;
    MapAccum<INT, BOOL> @@edges_sampled;
    SetAccum<VERTEX> @valid_v_out;
    SetAccum<VERTEX> @valid_v_in;

    # Initialize Kafka producer
    IF kafka_address != "" THEN
        producer = init_kafka_producer(
            kafka_address, kafka_max_size, security_protocol, 
            sasl_mechanism, sasl_username, sasl_password, ssl_ca_location,
            ssl_certificate_location, ssl_key_location, ssl_key_password,
            ssl_endpoint_identification_algorithm, sasl_kerberos_service_name,
            sasl_kerberos_keytab, sasl_kerberos_principal);
    END;

    # Shuffle vertex ID if needed
    start = {v_types};
    IF shuffle THEN
        num_vertices = start.size();
        res = SELECT s 
              FROM start:s
              POST-ACCUM s.@tmp_id = floor(rand()*num_vertices);
    ELSE
        res = SELECT s 
              FROM start:s
              POST-ACCUM s.@tmp_id = getvid(s);
    END;

    SumAccum<FLOAT> @@num_edges;
    IF filter_by IS NOT NULL THEN
      res = SELECT s
            FROM start:s -(seed_types:e)- v_types:t WHERE e.getAttr(filter_by, "BOOL")
            ACCUM 
              IF e.isDirected() THEN # we divide by two later to correct for undirected edges being counted twice, need to count directed edges twice to get correct count
                @@num_edges += 2
              ELSE
                @@num_edges += 1
              END;
    ELSE
      res = SELECT s 
            FROM start:s -(seed_types:e)- v_types:t 
            ACCUM
              IF e.isDirected() THEN # we divide by two later to correct for undirected edges being counted twice, need to count directed edges twice to get correct count
                @@num_edges += 2
              ELSE
                @@num_edges += 1
              END;
    END;
    INT batch_s;     
    IF batch_size IS NULL THEN
      batch_s = ceil((@@num_edges/2)/num_batches);
    ELSE  
      batch_s = batch_size;
    END;

    # Generate batches
    FOREACH batch_id IN RANGE[0, num_batches-1] DO
        SetAccum<VERTEX> @@vertices;
        SumAccum<STRING> @@e_batch;
        SumAccum<STRING> @@v_batch;
        SetAccum<EDGE> @@printed_edges;
        SetAccum<VERTEX> @@seeds;
        SetAccum<VERTEX> @@targets;
        HeapAccum<ID_Tuple> (1, tmp_id ASC) @@batch_heap;
        @@batch_heap.resize(batch_s);
        
        start = {v_types};
        IF filter_by IS NOT NULL THEN
            res = 
                SELECT s
                FROM start:s -(seed_types:e)- v_types:t
                WHERE e.getAttr(filter_by, "BOOL") 
                      AND 
                        ((e.isDirected() AND ((t.@tmp_id >= s.@tmp_id AND NOT @@edges_sampled.containsKey((t.@tmp_id*t.@tmp_id)+s.@tmp_id+t.@tmp_id)) OR
                                             (t.@tmp_id < s.@tmp_id AND NOT @@edges_sampled.containsKey((s.@tmp_id*s.@tmp_id)+t.@tmp_id))))
                          OR
                          (NOT e.isDirected() AND ((t.@tmp_id >= s.@tmp_id AND NOT @@edges_sampled.containsKey((t.@tmp_id*t.@tmp_id)+s.@tmp_id+t.@tmp_id)) OR
                                                    (t.@tmp_id < s.@tmp_id AND NOT @@edges_sampled.containsKey((s.@tmp_id*s.@tmp_id)+t.@tmp_id)))
                                              AND ((s.@tmp_id >= t.@tmp_id AND NOT @@edges_sampled.containsKey((s.@tmp_id*s.@tmp_id)+t.@tmp_id+s.@tmp_id)) OR
                                                   (t.@tmp_id < s.@tmp_id AND NOT @@edges_sampled.containsKey((t.@tmp_id*t.@tmp_id)+s.@tmp_id)))))
                                        
                ACCUM 
                    IF t.@tmp_id >= s.@tmp_id THEN
                        @@batch_heap += ID_Tuple(((t.@tmp_id*t.@tmp_id)+s.@tmp_id+t.@tmp_id), s, t)
                    ELSE
                        @@batch_heap += ID_Tuple(((s.@tmp_id*s.@tmp_id)+t.@tmp_id), s, t)
                    END;
            
            FOREACH elem IN @@batch_heap DO
              SetAccum<VERTEX> @@src;
              @@seeds += elem.src;
              @@targets += elem.tgt;
              @@src += elem.src;
              src = {@@src};
              res = SELECT s FROM src:s -(seed_types:e)- v_types:t
                    WHERE t == elem.tgt
                    ACCUM
                      s.@valid_v_out += elem.tgt,
                      t.@valid_v_in += elem.src;
            END;
            start = {@@seeds};
            res =
                SELECT s 
                FROM start:s -(seed_types:e)- v_types:t 
                WHERE t in @@targets AND s IN t.@valid_v_in AND t IN s.@valid_v_out
                ACCUM 
                    {SEEDEDGEATTRS},
                    @@printed_edges += e,
                    @@vertices += s,
                    @@vertices += t,
                    IF t.@tmp_id >= s.@tmp_id THEN
                      @@edges_sampled += (((t.@tmp_id*t.@tmp_id)+s.@tmp_id+t.@tmp_id) -> TRUE)
                    ELSE
                      @@edges_sampled += (((s.@tmp_id*s.@tmp_id)+t.@tmp_id) -> TRUE)
                    END;
        ELSE
            res = 
                SELECT s
                FROM start:s -(seed_types:e)- v_types:t
                WHERE ((e.isDirected() AND ((t.@tmp_id >= s.@tmp_id AND NOT @@edges_sampled.containsKey((t.@tmp_id*t.@tmp_id)+s.@tmp_id+t.@tmp_id)) OR
                                             (t.@tmp_id < s.@tmp_id AND NOT @@edges_sampled.containsKey((s.@tmp_id*s.@tmp_id)+t.@tmp_id))))
                      OR
                      (NOT e.isDirected() AND ((t.@tmp_id >= s.@tmp_id AND NOT @@edges_sampled.containsKey((t.@tmp_id*t.@tmp_id)+s.@tmp_id+t.@tmp_id)) OR
                                                (t.@tmp_id < s.@tmp_id AND NOT @@edges_sampled.containsKey((s.@tmp_id*s.@tmp_id)+t.@tmp_id)))
                                          AND ((s.@tmp_id >= t.@tmp_id AND NOT @@edges_sampled.containsKey((s.@tmp_id*s.@tmp_id)+t.@tmp_id+s.@tmp_id)) OR
                                                (t.@tmp_id < s.@tmp_id AND NOT @@edges_sampled.containsKey((t.@tmp_id*t.@tmp_id)+s.@tmp_id)))))
                                        
                ACCUM 
                    IF t.@tmp_id >= s.@tmp_id THEN
                        @@batch_heap += ID_Tuple(((t.@tmp_id*t.@tmp_id)+s.@tmp_id+t.@tmp_id), s, t)
                    ELSE
                        @@batch_heap += ID_Tuple(((s.@tmp_id*s.@tmp_id)+t.@tmp_id), s, t)
                    END;
            
            FOREACH elem IN @@batch_heap DO
              SetAccum<VERTEX> @@src;
              @@seeds += elem.src;
              @@targets += elem.tgt;
              @@src += elem.src;
              src = {@@src};
              res = SELECT s FROM src:s -(seed_types:e)- v_types:t
                    WHERE t == elem.tgt
                    ACCUM
                      s.@valid_v_out += elem.tgt,
                      t.@valid_v_in += elem.src;
            END;
            start = {@@seeds};
            res =
                SELECT s 
                FROM start:s -(seed_types:e)- v_types:t 
                WHERE t in @@targets AND s IN t.@valid_v_in AND t IN s.@valid_v_out
                ACCUM 
                    {SEEDEDGEATTRS},
                    @@printed_edges += e,
                    @@vertices += s,
                    @@vertices += t,
                    IF t.@tmp_id >= s.@tmp_id THEN
                      @@edges_sampled += (((t.@tmp_id*t.@tmp_id)+s.@tmp_id+t.@tmp_id) -> TRUE),
                      IF NOT e.isDirected() THEN
                        @@edges_sampled += (((s.@tmp_id*s.@tmp_id)+t.@tmp_id+s.@tmp_id) -> TRUE)
                      END
                    ELSE
                      @@edges_sampled += (((s.@tmp_id*s.@tmp_id)+t.@tmp_id) -> TRUE),
                      IF NOT e.isDirected() THEN
                        @@edges_sampled += (((t.@tmp_id*t.@tmp_id)+s.@tmp_id+t.@tmp_id) -> TRUE)
                      END
                    END;
        END;
    
        # Get seed vertices
        v_in_batch = @@vertices;
        seeds = 
            SELECT s 
            FROM v_in_batch:s 
            POST-ACCUM
                s.@valid_v_in.clear(), s.@valid_v_out.clear(),
                {VERTEXATTRS};
        # Get neighbors of seeeds
        FOREACH i IN RANGE[1, num_hops] DO
            seeds = SELECT t
                    FROM seeds:s -(e_types:e)- v_types:t 
                    SAMPLE num_neighbors EDGE WHEN s.outdegree() >= 1
                    ACCUM
                        IF NOT @@printed_edges.contains(e) THEN
                            {OTHEREDGEATTRS},
                            @@printed_edges += e
                        END;
            attr = 
                SELECT s
                FROM seeds:s 
                POST-ACCUM 
                    IF NOT @@vertices.contains(s) THEN
                        {VERTEXATTRS},
                        @@vertices += s
                    END;
        END;        
        IF kafka_address != "" THEN
            # Write to kafka
            kafka_errcode = write_to_kafka(producer, kafka_topic, batch_id%kafka_topic_partitions, "vertex_batch_" + stringify(batch_id), @@v_batch);
            IF kafka_errcode!=0 THEN 
                @@kafka_error += ("Error sending vertex batch " + stringify(batch_id) + ": "+ stringify(kafka_errcode) + "\n");
            END;
            kafka_errcode = write_to_kafka(producer, kafka_topic, batch_id%kafka_topic_partitions, "edge_batch_" + stringify(batch_id), @@e_batch);
            IF kafka_errcode!=0 THEN 
                @@kafka_error += ("Error sending edge batch " + stringify(batch_id) + ": "+ stringify(kafka_errcode) + "\n");
            END;
        ELSE
            # Add to response
            PRINT @@v_batch AS vertex_batch, @@e_batch AS edge_batch;   
        END;
    END;
    IF kafka_address != "" THEN
        kafka_errcode = close_kafka_producer(producer, kafka_timeout);
        IF kafka_errcode!=0 THEN 
            @@kafka_error += ("Error shutting down Kafka producer: " + stringify(kafka_errcode) + "\n");
        END;
        PRINT @@kafka_error as kafkaError;
    END;
}